import numpy as np

# Función para resolver la EDO utilizando el método de Euler
def euler_method(func, y0, x_values, h):
    y_values = [y0]
    for i in range(1, len(x_values)):
        x = x_values[i - 1]  # Valor actual de x
        y = y_values[i - 1]  # Valor actual de y
        y_new = y + h * eval(func)
        y_values.append(y_new)
    return y_values

# Solicitar datos al usuario
equation = input("Ingrese la ecuación diferencial (en términos de x e y): ")
y0 = float(input("Ingrese el valor inicial de y: "))
x_start = float(input("Ingrese el valor inicial de x: "))
x_end = float(input("Ingrese el valor final de x: "))
step_size = float(input("Ingrese el tamaño del paso (h): "))

# Generar valores de x para la discretización
x_values = [x_start + i * step_size for i in range(int((x_end - x_start) / step_size) + 1)]

# Resolver la EDO utilizando el método de Euler
y_values = euler_method(equation, y0, x_values, step_size)

print("Tabla de Discretización:")
print("------------------------")
print("   x     |     y")
print("------------------------")
for x, y in zip(x_values, y_values):
    print(f"{x:.1f}  |  {y:.4f}")
print("------------------------")
